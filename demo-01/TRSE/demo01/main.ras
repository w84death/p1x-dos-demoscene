program demo01;
@use "system/screen"
@use "system/memory"
@use "system/file"
@use "gfx/gfx"	
@use "system/tables"
@use "gfx/fonts"
@use "music/beeplay"
@use "system/compression"
@use "math/random"

var	
	@export "music/tune1.trt" "music.bin" 3
	song: incbin("music.bin");
	
	@export "fonts/font.flf" "fonts/font.bin" 255
	@compress "fonts/font.bin" "font.bin"
	font: string="font.bin";
	
	i,time,scene_time : integer = 0;
	color,color2,c : integer = 0;
	current_scene : integer = 0;
	current_scene_len : integer;
	last_scene : integer = 2;
	
	/*
	 * SCENE INTRO - STARS
	 */
	particle = record
			x,y,z:signed integer;
			speed:integer;
	end;
	stars : array[300] of particle;
	stars_colors : array[256] of byte = buildtable("Math.sin(i*Math.PI/512)*63");
	 
	 
	skyline_distribution : array[256] of integer = buildtable("4+Math.sin(i*Math.PI/256)*32*Math.random()");
	skyline_sizes : array[8] of integer = buildtable("8+32-Math.sin(Math.random())*32");
	depth_color : array[128] of integer = buildtable("63-Math.sin(i*Math.PI/512)*63");

	factor : integer;
	
	/* 
    * SCENE LINES 
	 */
	x1,x2 : integer = 160;
	y1,y2 : integer = 100;
	x,y,z : integer;
	sx,sy,sz : signed integer;
	shift : integer = 0;
	const line_width : byte = 15;
	
	sinx : array[256] of integer = buildsinetable(320-line_width);
	siny : array[256] of integer = buildsinetable(200-line_width);
	grad : array[128] of byte = buildsinetable(64);
	
	/*
	 * STRINGS
	 */
	intro_text: string="POWERED BY TRSE";
	lines_text: string="PLACEHOLDER EFFECT";
	outro_text: string="END OF THE DEMO...";	
	highway_text: string="HERE WILL BE THE HIGHWAY";
	date_text: string="OCTOBER 2023";
	tp:pointer;

procedure SetPalette(pal : integer);
begin
	case pal of
		0: begin						
			for i:=0 to 64 do
			begin	
				c:=32+grad[i];				
				Screen::SetColor(i,		4+i/2,4+i/2,4+i/2);
				Screen::SetColor(64+i,	63,63,63);
			end;
		end;
		
		1: begin						
			for i:=0 to 64 do
			begin
				c:=32+grad[i];	
				Screen::SetColor(i,		2+i/2,2+i/2,2+i/2);
				Screen::SetColor(64+i,	i/4,i/2,i/4);
				Screen::SetColor(128+i,	i/4,0,16-i/8);
				Screen::SetColor(192+i,	i/2,i/2,0);
			end;
		end;
	end;
end;

procedure DrawPalette();
begin
	for i:=0 to 256 do
	begin
		Gfx::DrawLine(i,0,i,8,i,Screen::buffer1);
	end;	
end;


procedure LogoAnimatedDraw();
begin
	x:=120;
	y:=40;
	
	Gfx::DrawSquare(x,y,x+5,y+100,64,Screen::buffer1);
	Gfx::DrawSquare(x+5,y,x+25,y+5,64+16,Screen::buffer1);
	Gfx::DrawSquare(x+5,y+55,x+25,y+60,64+48,Screen::buffer1);
	Gfx::DrawSquare(x+25,y,x+30,y+60,64+32,Screen::buffer1);
	
	Gfx::DrawSquare(x+40,y,x+45,y+100,64+16,Screen::buffer1);
	Gfx::DrawSquare(x+35,y+5,x+40,y+10,64,Screen::buffer1);
	
	Gfx::DrawSquare(x+55,y,x+60,y+40,64+48,Screen::buffer1);
	Gfx::DrawSquare(x+75,y,x+80,y+40,64+32,Screen::buffer1);
	Gfx::DrawSquare(x+55,y+55,x+60,y+100,64,Screen::buffer1);
	Gfx::DrawSquare(x+75,y+55,x+80,y+100,64+16,Screen::buffer1);
	
	Gfx::DrawSquare(x+60,y+40,x+65,y+45,64+32,Screen::buffer1);
	Gfx::DrawSquare(x+60,y+50,x+65,y+55,64+16,Screen::buffer1);
	Gfx::DrawSquare(x+70,y+40,x+75,y+45,64,Screen::buffer1);
	Gfx::DrawSquare(x+70,y+50,x+75,y+55,64+16,Screen::buffer1);
	Gfx::DrawSquare(x+65,y+45,x+70,y+50,64+48,Screen::buffer1);
end;
	
procedure SceneIntroRender();
begin
	Fonts::addValue:=mod(scene_time,32)+64;

	for i:=0 to 300 do
	begin
		stars[i].z -= stars[i].speed;
		if(stars[i].z<=0) then stars[i].z:=255;
		
		sx:=stars[i].x+5000;
		sy:=stars[i].y+5000;
		sz:=stars[i].z;
		x:=(sx/sz)+160;
		y:=(sy/sz)+100;		
		
		color:=63-stars_colors[sz];

		if (x>0 and (x<320 and (y>0 and y<200))) then
		begin
			Gfx::PutPixel(x,y,color,Screen::buffer1);
		end		
	end;
	LogoAnimatedDraw();
	Fonts::PrintString(tp,160-(hi(tp))*5,170,Screen::buffer1);
end;

procedure SceneIntroReset();
begin
	for i:=0 to 300 do
	begin
		stars[i].x := 10000-mod(Random::Random(),20000);
		stars[i].y := 10000-mod(Random::Random(),20000); 
		stars[i].z := mod(Random::Random(),255)+1;
		stars[i].speed :=2+mod(Random::Random(),12);
	end;
	tp:=#intro_text;
	current_scene_len:=300;
end;

procedure SceneHighwaySkyLineDraw();
var
	levels : integer;
	size : integer;
begin

	for i:=0 to 80 do
	begin
		Gfx::Hline(0,320,i,128+i/2,Screen::buffer1);
	end;
	
	Gfx::Hline(0,320,80,31,Screen::buffer1);
	
	Fonts::addValue:=90;
	tp:=#date_text;
	Fonts::PrintString(tp,160-(hi(tp))*5,40,Screen::buffer1);
	
	for i:=0 to 256 step 16 do
	begin
		x:=32+i;
		levels:=skyline_distribution[i];
		size:=4+skyline_sizes[i/16];
		Gfx::DrawSquare(x,80-levels,x+size,80,0,Screen::buffer1);
	end;
end;

procedure SceneHighwayTerrainDraw();
var
		factor2:integer;
begin
	for i:=0 to 120 do
	begin
		factor:=1+(i*100/120);
		factor2:=1+(i*100+1)/factor;
		color:=63-depth_color[i];
		color2:=127-depth_color[i];
		c:=255-depth_color[i];

		Gfx::Hline(0,160-factor,80+i,color2,Screen::buffer1);
		Gfx::Hline(160-factor,160+factor,80+i,color,Screen::buffer1);
		if(mod(scene_time-factor2,20)>15) then
		begin
			Gfx::Hline(160-factor/5,160+factor/5,80+i,c,Screen::buffer1);			
		end;
		Gfx::Hline(160+factor,320,80+i,color2,Screen::buffer1);
	end;
end;

procedure SceneHighwayCarDraw();
begin

end;

procedure SceneHighwayReset();
begin
	current_scene_len:=2000;
	SceneHighwaySkyLineDraw();
	SceneHighwayTerrainDraw();
end;

procedure SceneHighwayRender();
begin	
	// once 2 sec refresh city

	SceneHighwayTerrainDraw();
	SceneHighwayCarDraw();
end;


procedure SceneOutroRender();
begin
	Fonts::addValue:=128;
	Fonts::PrintString(tp,160-(hi(tp))*5,100,Screen::buffer1);
end;

procedure SceneOutroReset();
begin
	tp:=#outro_text;
	current_scene_len:=30;
end;

procedure ResetScene(scene_to_reset: integer);
begin
	Screen::ClearBuffer32bit(Screen::buffer1,0);
	case scene_to_reset of
		0: begin
			SceneIntroReset();
			end;
		1: begin
			SceneHighwayReset();
			end;
		2: begin
			SceneOutroReset();
			end;
	end;
end;

procedure RenderScene(scene_to_render: integer);
begin
	case scene_to_render of
		0: begin
			Screen::ClearBuffer32bit(Screen::buffer1,0);
			SceneIntroRender();
			end;
		1: begin
			SceneHighwayRender();
			end;
		2: begin
			Screen::ClearBuffer32bit(Screen::buffer1,0);
			SceneOutroRender();
		end;
	end;
end;


interrupt RasterIRQ();
begin
	StartIRQ();
	BeePlay::Update();
	BeePlay::Play();
	inc(time);
	inc(scene_time);
	CloseIRQ();
end;


begin
	Memory::Init();
	Screen::SetMode($13);
	Screen::InitVGABuffers(4);
	ResetScene(current_scene);
	SetPalette(current_scene);	
	
	BeePlay::Initialize(#song);
	BeePlay::octShift:=1; // octave shift
	BeePlay::decayLength[0]:=2; // Sustain of columm 0
	BeePlay::decayLength[1]:=4; // Sustain of column 1
	BeePlay::speed := 3;
			
	File::ReadAll(#font, Screen::buffer4);
	Compression::Decompress(Screen::buffer4, Screen::buffer3);
	Fonts::Init(Screen::buffer3,10,16,32,Fonts::DEFAULT_SHIFT);
	Fonts::writeType := Fonts::WRITETYPE_MASK;
	Fonts::maskColor := 1;

	Memory::SetTimer(33860);
	SetInterrupt($8, RasterIRQ());

	while (true) do
	begin
		waitforverticalblank();
			
		Screen::CopyVGABuffer32bit(Screen::buffer1,ptr(Screen::VGA,0));
		
		if (scene_time>current_scene_len) then
		begin
			current_scene+=1;
			scene_time:=0;
			if (current_scene>last_scene) then
			begin
				current_scene:=0;
				time:=0;
			end;
			
			ResetScene(current_scene);
			SetPalette(current_scene);
		end;
	
		
		RenderScene(current_scene);
		
		DrawPalette();
	end;
	
end.